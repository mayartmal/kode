{
    "docs": [
        {
            "location": "/",
            "text": "\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0437\u0430\u0434\u0430\u0447",
            "title": "\u0421\u0442\u0430\u0440\u0442"
        },
        {
            "location": "/#_1",
            "text": "",
            "title": "\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0437\u0430\u0434\u0430\u0447"
        },
        {
            "location": "/tasks/is_unique/",
            "text": "\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\u0414\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043a\u0430.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 1 \u0440\u0430\u0437.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a.\n\n\n\n\n\n\n\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n\n\n\n\n\n\n\n\n\n\u0434\u043e\u043c\n\n\nTrue\n\n\n\n\n\n\n\u0434\u043e\u043c\u043e\u0444\u043e\u043d\n\n\nFalse\n\n\n\n\n\n\n\n\n\u0422\u0435\u0441\u0442\u044b\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\n\n\nclass TestIsUnique(unittest.TestCase):\n\n    def test__for_unique_chars__returns_True(self):\n        word = Word('\u0434\u043e\u043c')\n\n        result = word.is_unique()\n\n        self.assertTrue(result)\n\n    def test__for_repeated_chars__returns_False(self):\n        word = Word('\u0434\u043e\u043c\u043e\u0444\u043e\u043d')\n\n        result = word.is_unique()\n\n        self.assertFalse(result)\n\n\n\n\n\n\u041a\u043e\u0434\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word. \u041e\u0434\u043d\u043e \u0438\u0437 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\"\n\n\nclass Word:\n\n    def __init__(self, text):\n        self.__text = text\n\n    @property\n    def text(self):\n        return self.__text\n\n    def is_unique(self) -> bool:\n        memo = set()\n\n        for symbol in self.text:\n            if symbol in memo:\n                return False\n            memo.add(symbol)\n\n        return True",
            "title": "\u0423\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430"
        },
        {
            "location": "/tasks/is_unique/#_1",
            "text": "",
            "title": "\u0414\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432"
        },
        {
            "location": "/tasks/is_unique/#_2",
            "text": "\u0414\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043a\u0430.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 1 \u0440\u0430\u0437.",
            "title": "\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"
        },
        {
            "location": "/tasks/is_unique/#_3",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a.     \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442      \u0434\u043e\u043c  True    \u0434\u043e\u043c\u043e\u0444\u043e\u043d  False",
            "title": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b"
        },
        {
            "location": "/tasks/is_unique/#_4",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.  class TestIsUnique(unittest.TestCase):\n\n    def test__for_unique_chars__returns_True(self):\n        word = Word('\u0434\u043e\u043c')\n\n        result = word.is_unique()\n\n        self.assertTrue(result)\n\n    def test__for_repeated_chars__returns_False(self):\n        word = Word('\u0434\u043e\u043c\u043e\u0444\u043e\u043d')\n\n        result = word.is_unique()\n\n        self.assertFalse(result)",
            "title": "\u0422\u0435\u0441\u0442\u044b"
        },
        {
            "location": "/tasks/is_unique/#_5",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word. \u041e\u0434\u043d\u043e \u0438\u0437 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \"\u041c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e\"  class Word:\n\n    def __init__(self, text):\n        self.__text = text\n\n    @property\n    def text(self):\n        return self.__text\n\n    def is_unique(self) -> bool:\n        memo = set()\n\n        for symbol in self.text:\n            if symbol in memo:\n                return False\n            memo.add(symbol)\n\n        return True",
            "title": "\u041a\u043e\u0434"
        },
        {
            "location": "/tasks/check_permutation/",
            "text": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438\n\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\u0414\u0430\u043d\u044b \u0434\u0432\u0435 \u0441\u0442\u043e\u0440\u043a\u0438.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a.\n\n\n\n\n\n\n\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\n\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n\n\n\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n\n\n\n\n\n\n\n\n\n\u043b\u043e\u0441\u044c\n\n\n\u0441\u043e\u043b\u044c\n\n\nTrue\n\n\n\n\n\n\n\u043b\u043e\u0441\u044c\n\n\n\u043b\u043e\u0441\u044c\n\n\nFalse\n\n\n\n\n\n\n\u043b\u043e\u0441\u044c\n\n\n\u043b\u043e\u0441\u044c2\n\n\nFalse\n\n\n\n\n\n\n\n\n\n\nFalse\n\n\n\n\n\n\n\u043c\u0435\u0434\u0432\u0435\u0434\n\n\n\u043b\u043e\u0441\u044c\n\n\nFalse\n\n\n\n\n\n\n\u043b\u043e\u0441\u044c\n\n\n\u043b\u043e\u0441\u044c\u043a\u0430\n\n\nFalse\n\n\n\n\n\n\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435\n\n\n\u0412 \u043a\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 2 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1?\n\n\n1. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n2. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 2 \u0435\u0441\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0441\u0442\u0440\u043e\u043a\u0438 1.\n\n\n\n\u0412 \u043a\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0442\u0440\u043e\u043a\u0430 2 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1?\n\n\n1. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n2. \u0421\u0442\u0440\u043e\u043a\u0438 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0440\u0430\u0432\u043d\u044b.\n3. \u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 1 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0441\u0438\u043c\u0432\u043e\u043b, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 2.\n\n\n\n\u0422\u0435\u0441\u0442\u044b\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\n\n\nclass TestIsPermutation(unittest.TestCase):\n\n    def test__mixed_strings__returns_True(self):\n        \"\"\"\n            \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u0441\u043e\u043b\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertTrue(result)\n\n    def test__equal_strings__returns_False(self):\n        \"\"\"\n            \u0414\u0432\u0435 \u0440\u0430\u0432\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__not_equal_lengths_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438\n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c2')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__empty_strings__returns_False(self):\n        \"\"\"\n            \u0414\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('')\n        word_2 = Word('')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__different_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('\u043c\u0435\u0434\u0432\u0435\u0434')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__same_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c\u043a\u0430')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n\n\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430\n\n\nclass TestIsDifferentFrom(unittest.TestCase):\n\n    def test__equal_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_different_from(word_2)\n\n        self.assertFalse(result)\n\n    def test__not_equal_strings__returns_True(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c\u043a\u0430')\n\n        result = word_1.is_different_from(word_2)\n\n        self.assertTrue(result)\n\n\n\n\n\n\u041a\u043e\u0434\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word. \u041c\u0435\u0442\u043e\u0434 is_permutation  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u0436\u0435\u0432\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n\n\nclass Word:\n\n    def __init__(self, text: str):\n        self.__text = text\n\n    def __str__(self):\n        return self.__text\n\n    def is_permutation(self, word) -> bool:\n        if not str(self) or not str(word):\n            return False\n\n        if len(str(self)) != len(str(word)):\n            return False\n\n        if str(self) == str(word):\n            return False\n\n        if self.is_different_from(word):\n            return False\n\n        if word.is_different_from(self):\n            return False\n\n        return True\n\n    def is_different_from(self, word):\n        for symbol in str(word):\n            if symbol not in str(self):\n                return True\n        return False",
            "title": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0441\u0442\u0440\u043e\u043a\u0438"
        },
        {
            "location": "/tasks/check_permutation/#_1",
            "text": "",
            "title": "\u041f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438"
        },
        {
            "location": "/tasks/check_permutation/#_2",
            "text": "\u0414\u0430\u043d\u044b \u0434\u0432\u0435 \u0441\u0442\u043e\u0440\u043a\u0438.\n\u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u043f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.",
            "title": "\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"
        },
        {
            "location": "/tasks/check_permutation/#_3",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0442\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a.     \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430  \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430  \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442      \u043b\u043e\u0441\u044c  \u0441\u043e\u043b\u044c  True    \u043b\u043e\u0441\u044c  \u043b\u043e\u0441\u044c  False    \u043b\u043e\u0441\u044c  \u043b\u043e\u0441\u044c2  False      False    \u043c\u0435\u0434\u0432\u0435\u0434  \u043b\u043e\u0441\u044c  False    \u043b\u043e\u0441\u044c  \u043b\u043e\u0441\u044c\u043a\u0430  False",
            "title": "\u041f\u0440\u0438\u043c\u0435\u0440\u044b"
        },
        {
            "location": "/tasks/check_permutation/#_4",
            "text": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0430 2 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1?  1. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n2. \u0412 \u0441\u0442\u0440\u043e\u043a\u0435 2 \u0435\u0441\u0442\u044c \u0432\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0441\u0442\u0440\u043e\u043a\u0438 1.  \u0412 \u043a\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u0442\u0440\u043e\u043a\u0430 2 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 1?  1. \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u044b \u0441\u0442\u0440\u043e\u043a \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442\n2. \u0421\u0442\u0440\u043e\u043a\u0438 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e \u0440\u0430\u0432\u043d\u044b.\n3. \u0415\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 1 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0441\u0438\u043c\u0432\u043e\u043b, \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 2.",
            "title": "\u0420\u0435\u0448\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/tasks/check_permutation/#_5",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.  class TestIsPermutation(unittest.TestCase):\n\n    def test__mixed_strings__returns_True(self):\n        \"\"\"\n            \u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u0441\u043e\u043b\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertTrue(result)\n\n    def test__equal_strings__returns_False(self):\n        \"\"\"\n            \u0414\u0432\u0435 \u0440\u0430\u0432\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__not_equal_lengths_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0437\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438\n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c2')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__empty_strings__returns_False(self):\n        \"\"\"\n            \u0414\u0432\u0435 \u043f\u0443\u0441\u0442\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('')\n        word_2 = Word('')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__different_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430\u043c\u0438 \n        \"\"\"\n        word_1 = Word('\u043c\u0435\u0434\u0432\u0435\u0434')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)\n\n    def test__same_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c\u043a\u0430')\n\n        result = word_1.is_permutation(word_2)\n\n        self.assertFalse(result)  \u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0434\u0440\u0443\u0433 \u043e\u0442 \u0434\u0440\u0443\u0433\u0430  class TestIsDifferentFrom(unittest.TestCase):\n\n    def test__equal_strings__returns_False(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c')\n\n        result = word_1.is_different_from(word_2)\n\n        self.assertFalse(result)\n\n    def test__not_equal_strings__returns_True(self):\n        \"\"\"\n            \u0421\u0442\u0440\u043e\u043a\u0438 \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f  \n        \"\"\"\n        word_1 = Word('\u043b\u043e\u0441\u044c')\n        word_2 = Word('\u043b\u043e\u0441\u044c\u043a\u0430')\n\n        result = word_1.is_different_from(word_2)\n\n        self.assertTrue(result)",
            "title": "\u0422\u0435\u0441\u0442\u044b"
        },
        {
            "location": "/tasks/check_permutation/#_6",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word. \u041c\u0435\u0442\u043e\u0434 is_permutation  \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u0441\u0442\u043e\u0440\u043e\u0436\u0435\u0432\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0441\u0440\u0430\u0437\u0443 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.  class Word:\n\n    def __init__(self, text: str):\n        self.__text = text\n\n    def __str__(self):\n        return self.__text\n\n    def is_permutation(self, word) -> bool:\n        if not str(self) or not str(word):\n            return False\n\n        if len(str(self)) != len(str(word)):\n            return False\n\n        if str(self) == str(word):\n            return False\n\n        if self.is_different_from(word):\n            return False\n\n        if word.is_different_from(self):\n            return False\n\n        return True\n\n    def is_different_from(self, word):\n        for symbol in str(word):\n            if symbol not in str(self):\n                return True\n        return False",
            "title": "\u041a\u043e\u0434"
        },
        {
            "location": "/tasks/urlify/",
            "text": "\u0417\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c\n\n\n\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438\n\n\n\u0414\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043a\u0430 \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \u0432\u0441\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c.\n\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.\n\n\n\u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 {\n    \u0427\u0438\u0442\u0430\u0435\u043c \u0442\u0438\u043a\u0443\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\n    \u042d\u0442\u043e \u043f\u0440\u043e\u0431\u0435\u043b? {\n        \u0423\u0436\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0431\u0435\u043b? {\n            \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443\n        }\n        \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c %20 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n        \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443\n    }\n    \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n}\n\n\n\n\u0422\u0435\u0441\u0442\u044b\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.\n\n\nclass TestWithReplacedWhitespaces(unittest.TestCase):\n\n    def test__one_whitespace__returns_one_replaced_sequence(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0434\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \n        \"\"\"\n        expected = Word('%20')\n        word = Word(' ')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__one_symbol_between_whitespaces__returns_one_symbol_between_replaced_sequence(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0432\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u043f\u043e \u043a\u0440\u0430\u044f\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0434\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \n        \"\"\"\n        expected = Word('%20X%20')\n        word = Word(' X ')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__one_whitespace_between_symbols__returns_one_replaced_sequence_between_symbols(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b \u043c\u0435\u0436\u0434\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \n        \"\"\"\n        expected = Word('X%20X')\n        word = Word('X X')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__space_after_space__returns_replaced_sequence_after_replaced_sequencce(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \n        \"\"\"\n        expected = Word('X%20%20X')\n        word = Word('X  X')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n\n\n\n\u041a\u043e\u0434\n\n\n\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word\n\n\n\n\n\nclass Word:\n\n    def __init__(self, text: str):\n        self.__text = text\n\n    @property\n    def text(self):\n        return self.__text\n\n    def __repr__(self):\n        return '\"{}\"'.format(self.text)\n\n    def __eq__(self, other):\n        return bool(self.text == other.text)\n\n    def with_replaced_whitespaces(self):\n        result_str = ''\n        replaced_sequence = '%20'\n        is_previous_symbol_space = False\n\n        for symbol in self.text:\n            if symbol == ' ':\n                if is_previous_symbol_space:\n                    continue\n                result_str += replaced_sequence\n                continue\n            result_str += symbol\n\n        return Word(result_str)",
            "title": "URL-\u0438\u0437\u0430\u0446\u0438\u044f"
        },
        {
            "location": "/tasks/urlify/#_1",
            "text": "",
            "title": "\u0417\u0430\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c"
        },
        {
            "location": "/tasks/urlify/#_2",
            "text": "\u0414\u0430\u043d\u0430 \u0441\u0442\u043e\u0440\u043a\u0430 \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n\u0417\u0430\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \u0432\u0441\u0435 \u043f\u0440\u043e\u0431\u0435\u043b\u044b, \n\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u043b\u0438 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c.",
            "title": "\u0423\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438"
        },
        {
            "location": "/tasks/urlify/#_3",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c.  \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 {\n    \u0427\u0438\u0442\u0430\u0435\u043c \u0442\u0438\u043a\u0443\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b\n    \u042d\u0442\u043e \u043f\u0440\u043e\u0431\u0435\u043b? {\n        \u0423\u0436\u0435 \u0431\u044b\u043b \u043f\u0440\u043e\u0431\u0435\u043b? {\n            \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443\n        }\n        \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c %20 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n        \u041f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043a \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443\n    }\n    \u041a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n}",
            "title": "\u0420\u0435\u0448\u0435\u043d\u0438\u0435"
        },
        {
            "location": "/tasks/urlify/#_4",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u0442\u0435\u0441\u0442\u044b \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0445 \u0441\u043b\u0443\u0447\u0430\u0435\u0432.  class TestWithReplacedWhitespaces(unittest.TestCase):\n\n    def test__one_whitespace__returns_one_replaced_sequence(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0434\u0438\u043d\u043e\u0447\u043d\u044b\u0439 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0434\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \n        \"\"\"\n        expected = Word('%20')\n        word = Word(' ')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__one_symbol_between_whitespaces__returns_one_symbol_between_replaced_sequence(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0434\u0432\u0430 \u043f\u0440\u043e\u0431\u0435\u043b\u0430 \u043f\u043e \u043a\u0440\u0430\u044f\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u043e\u0434\u043d\u0438\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c %20 \n        \"\"\"\n        expected = Word('%20X%20')\n        word = Word(' X ')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__one_whitespace_between_symbols__returns_one_replaced_sequence_between_symbols(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b \u043c\u0435\u0436\u0434\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \n        \"\"\"\n        expected = Word('X%20X')\n        word = Word('X X')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)\n\n    def test__space_after_space__returns_replaced_sequence_after_replaced_sequencce(self):\n        \"\"\"\n            \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432, \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0440\u0443\u0433 \u0437\u0430 \u0434\u0440\u0443\u0433\u043e\u043c \n        \"\"\"\n        expected = Word('X%20%20X')\n        word = Word('X  X')\n\n        result = word.with_replaced_whitespaces()\n\n        self.assertEquals(expected, result)",
            "title": "\u0422\u0435\u0441\u0442\u044b"
        },
        {
            "location": "/tasks/urlify/#_5",
            "text": "\u041d\u0430\u043f\u0438\u0448\u0435\u043c \u043a\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Word  \n\n\nclass Word:\n\n    def __init__(self, text: str):\n        self.__text = text\n\n    @property\n    def text(self):\n        return self.__text\n\n    def __repr__(self):\n        return '\"{}\"'.format(self.text)\n\n    def __eq__(self, other):\n        return bool(self.text == other.text)\n\n    def with_replaced_whitespaces(self):\n        result_str = ''\n        replaced_sequence = '%20'\n        is_previous_symbol_space = False\n\n        for symbol in self.text:\n            if symbol == ' ':\n                if is_previous_symbol_space:\n                    continue\n                result_str += replaced_sequence\n                continue\n            result_str += symbol\n\n        return Word(result_str)",
            "title": "\u041a\u043e\u0434"
        }
    ]
}